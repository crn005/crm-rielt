// DyncamicForm.tsx
import React, { useState } from 'react'
import DynamicField, { FieldConfig } from './DynamicField'

interface DynamicFormProps {
	fields: Record<string, FieldConfig>
	categoryId: number // –î–æ–±–∞–≤–ª—è–µ–º categoryId –∫–∞–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–ø—Å
}

const DynamicForm: React.FC<DynamicFormProps> = ({ fields, categoryId }) => {
	const [formData, setFormData] = useState<Record<string, any>>({})

	const handleChange = (fieldKey: string, value: any) => {
		setFormData(prev => ({
			...prev,
			[fieldKey]: value,
		}))
	}

	const handleSubmit = async (e: React.FormEvent) => {
		e.preventDefault()

		try {
      const payload = {
        ...formData,
				categoryId, // –î–æ–±–∞–≤–ª—è–µ–º categoryId
			}
      console.log('–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:', payload)

			const response = await fetch('http://localhost:3005/submit', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify(payload),
			})

			if (response.ok) {
				const result = await response.json()
				console.log('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result)
			} else {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö:', response.statusText)
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error)
		}
	}

	/* console.log(`üéà = ${JSON.stringify(fields)}`); */

	return (
		<form className='pl-10' onSubmit={handleSubmit}>
			{Object.entries(fields).map(([fieldKey, fieldConfig]) => (
				<DynamicField
					key={fieldKey}
					fieldKey={fieldKey}
					fieldConfig={fieldConfig}
					onChange={handleChange}
				/>
			))}
			<button className='primary-button my-2 mx-2' type='submit'>
				–°–æ—Ö—Ä–∞–Ω–∏—Ç—å
			</button>
		</form>
	)
}

export default DynamicForm
